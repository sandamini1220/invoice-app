import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { getInvoiceById, createInvoice, updateInvoice } from '../api/invoiceAPI';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

const InvoiceForm = () => {
  const { id } = useParams(); // For edit mode
  const navigate = useNavigate();
  const isEditMode = !!id;

  const [loading, setLoading] = useState(isEditMode);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');

  const [formData, setFormData] = useState({
    invoiceNo: '', // This will be auto-generated by backend
    date: new Date().toISOString().split('T')[0], // Default to today
    customer: '',
    amount: '',
    firstItem: '',
    balance: '',
  });

  // Load data if editing
  useEffect(() => {
    if (isEditMode) {
      loadInvoiceData();
    }
  }, [id, isEditMode]);

  const loadInvoiceData = async () => {
    try {
      setLoading(true);
      setError('');
      const response = await getInvoiceById(id);
      const invoice = response.data;
      
      setFormData({
        invoiceNo: invoice.invoiceNo || '',
        date: invoice.date ? invoice.date.split('T')[0] : '',
        customer: invoice.customer || '',
        amount: invoice.amount || '',
        firstItem: invoice.firstItem || '',
        balance: invoice.balance || '',
      });
    } catch (err) {
      console.error('Failed to load invoice:', err);
      if (err.response?.status === 404) {
        setError('Invoice not found');
      } else if (err.response?.status === 401) {
        setError('Authentication required. Please log in again.');
        localStorage.removeItem('token');
        navigate('/login');
      } else {
        setError('Failed to load invoice details');
      }
    } finally {
      setLoading(false);
    }
  };

  // Handle form input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
    
    // Clear error when user starts typing
    if (error) setError('');
  };

  // Validate form data
  const validateForm = () => {
    const { date, customer, amount } = formData;
    
    if (!date.trim()) {
      setError('Date is required');
      return false;
    }
    
    if (!customer.trim()) {
      setError('Customer name is required');
      return false;
    }
    
    if (!amount || isNaN(amount) || Number(amount) < 0) {
      setError('Valid amount is required');
      return false;
    }
    
    return true;
  };

  // Submit form data to backend
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      setSaving(true);
      setError('');
      
      // Prepare data for API
      const invoiceData = {
        date: formData.date,
        customer: formData.customer.trim(),
        amount: Number(formData.amount),
        firstItem: formData.firstItem.trim() || null,
        balance: formData.balance ? Number(formData.balance) : 0,
      };

      // Don't send invoiceNo for new invoices (backend auto-generates)
      if (isEditMode) {
        invoiceData.invoiceNo = formData.invoiceNo;
      }

      let response;
      if (isEditMode) {
        response = await updateInvoice(id, invoiceData);
      } else {
        response = await createInvoice(invoiceData);
      }

      // Success feedback
      const action = isEditMode ? 'updated' : 'created';
      console.log(`Invoice ${action} successfully:`, response.data);
      
      navigate('/', { 
        state: { 
          message: `Invoice ${action} successfully!`,
          type: 'success'
        }
      });
      
    } catch (err) {
      console.error('Error saving invoice:', err);
      
      if (err.response?.status === 401) {
        setError('Authentication required. Please log in again.');
        localStorage.removeItem('token');
        navigate('/login');
      } else if (err.response?.status === 400) {
        setError(err.response.data?.error || 'Invalid data provided');
      } else if (err.response?.data?.message) {
        setError(err.response.data.message);
      } else {
        setError(`Failed to ${isEditMode ? 'update' : 'create'} invoice`);
      }
    } finally {
      setSaving(false);
    }
  };

  // Generate PDF from form content
  const generatePDF = () => {
    const input = document.getElementById('invoice-content');
    if (!input) {
      alert('Invoice content not found');
      return;
    }

    // Temporarily show all form data for PDF
    const elementsToHide = input.querySelectorAll('button, .no-print');
    elementsToHide.forEach(el => el.style.display = 'none');

    html2canvas(input, {
      scale: 2,
      useCORS: true,
      allowTaint: true
    }).then(canvas => {
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');

      const imgProps = pdf.getImageProperties(imgData);
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      
      const fileName = formData.invoiceNo 
        ? `Invoice_${formData.invoiceNo}.pdf`
        : 'Invoice.pdf';
      
      pdf.save(fileName);

      // Restore hidden elements
      elementsToHide.forEach(el => el.style.display = '');
    }).catch(err => {
      console.error('Error generating PDF:', err);
      alert('Failed to generate PDF');
      
      // Restore hidden elements
      elementsToHide.forEach(el => el.style.display = '');
    });
  };

  // Clear form
  const handleClear = () => {
    if (window.confirm('Are you sure you want to clear all fields?')) {
      setFormData({
        invoiceNo: '',
        date: new Date().toISOString().split('T')[0],
        customer: '',
        amount: '',
        firstItem: '',
        balance: '',
      });
      setError('');
    }
  };

  if (loading) {
    return (
      <div className="max-w-md mx-auto mt-10 p-6">
        <div className="text-center">Loading invoice data...</div>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-800">
          {isEditMode ? 'Edit Invoice' : 'Create New Invoice'}
        </h2>
        {isEditMode && formData.invoiceNo && (
          <p className="text-gray-600 mt-1">Invoice No: {formData.invoiceNo}</p>
        )}
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          <div className="flex justify-between items-center">
            <span>{error}</span>
            <button 
              onClick={() => setError('')}
              className="text-red-500 hover:text-red-700 text-xl"
            >
              Ã—
            </button>
          </div>
        </div>
      )}

      <div id="invoice-content" className="space-y-6">
        {/* Invoice Header for PDF */}
        <div className="text-center border-b pb-4 mb-6">
          <h3 className="text-xl font-bold">Invoice</h3>
          {formData.invoiceNo && (
            <p className="text-gray-600">No: {formData.invoiceNo}</p>
          )}
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Date Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Date *
            </label>
            <input
              type="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Customer Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Customer Name *
            </label>
            <input
              type="text"
              name="customer"
              placeholder="Enter customer name"
              value={formData.customer}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Amount Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Total Amount *
            </label>
            <input
              type="number"
              name="amount"
              placeholder="0.00"
              value={formData.amount}
              onChange={handleChange}
              required
              min="0"
              step="0.01"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* First Item Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              First Item
            </label>
            <input
              type="text"
              name="firstItem"
              placeholder="Enter first item (optional)"
              value={formData.firstItem}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Balance Field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Balance
            </label>
            <input
              type="number"
              name="balance"
              placeholder="0.00"
              value={formData.balance}
              onChange={handleChange}
              min="0"
              step="0.01"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Action Buttons */}
          <div className="flex flex-wrap gap-3 pt-6 no-print">
            <button
              type="submit"
              disabled={saving}
              className={`flex-1 min-w-[120px] py-3 px-4 rounded-lg font-medium transition-colors ${
                saving
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 text-white'
              }`}
            >
              {saving 
                ? (isEditMode ? 'Updating...' : 'Creating...') 
                : (isEditMode ? 'Update Invoice' : 'Create Invoice')
              }
            </button>

            {(formData.customer || formData.amount) && (
              <button
                type="button"
                onClick={generatePDF}
                className="flex-1 min-w-[120px] bg-gray-600 text-white py-3 px-4 rounded-lg hover:bg-gray-700 font-medium transition-colors"
              >
                Download PDF
              </button>
            )}

            <button
              type="button"
              onClick={handleClear}
              className="flex-1 min-w-[120px] bg-yellow-600 text-white py-3 px-4 rounded-lg hover:bg-yellow-700 font-medium transition-colors"
            >
              Clear Form
            </button>

            <button
              type="button"
              onClick={() => navigate('/')}
              className="flex-1 min-w-[120px] bg-gray-500 text-white py-3 px-4 rounded-lg hover:bg-gray-600 font-medium transition-colors"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>

      {/* Form Summary for PDF */}
      {(formData.customer || formData.amount) && (
        <div className="mt-8 pt-6 border-t">
          <h4 className="font-semibold mb-4">Invoice Summary:</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div><strong>Date:</strong> {formData.date}</div>
            <div><strong>Customer:</strong> {formData.customer}</div>
            <div><strong>Amount:</strong> ${Number(formData.amount || 0).toFixed(2)}</div>
            <div><strong>Balance:</strong> ${Number(formData.balance || 0).toFixed(2)}</div>
            {formData.firstItem && (
              <div className="col-span-2"><strong>First Item:</strong> {formData.firstItem}</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default InvoiceForm;